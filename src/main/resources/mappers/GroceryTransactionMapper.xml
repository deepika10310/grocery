<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.grocery.on.wheels.dao.GroceryTransactionMapper">
<insert id="createInvoice" parameterType="com.grocery.on.wheels.model.Invoice">
	INSERT INTO inventory_invoice (invoice_id, invoice_name, invoice_date)
	 VALUES (#{invoiceId}, #{invoiceName},now());
</insert>

<insert id="saveInventoryTransactionInfo" parameterType="com.grocery.on.wheels.model.InventoryPurchaseTransaction">
	INSERT INTO inventory_transaction (
	invoice_id, inventory_id, item_id, mrp, item_exp_dt, cp, sp, supplier_id, quantity, discount, other_charges, transaction_type, transaction_status, transaction_date, item_price_id)
	 VALUES 
	 <foreach collection="purchaseTransItem" item="item" index="index" open="(" separator="),("  close=")">
		#{invoiceId},
		#{inventoryId},
		#{item.itemId},
		#{item.mrp},
		#{item.expDate},
		#{item.cp},
		#{item.sp},
		#{supplierId},
		#{item.itemCount},
		#{discount},
		#{otherCharges},
		#{transactionType},
		#{transactionStatus},
		now(),
		#{item.itemPriceId}
    </foreach>
</insert>

<update id="updateInventoryStockPurchase" parameterType="com.grocery.on.wheels.model.InventoryPurchaseTransaction">
	<foreach collection="purchaseTransItem" item="item" separator=";">
		update inventory_item_map
		set purchase_pending = purchase_pending + #{item.itemCount}
		where inventory_id = #{inventoryId}
		and item_price_id = #{item.itemPriceId}
		and exp_dt = #{item.expDate}
	 </foreach>;
</update>

<insert id="saveVanTransactionInfo" parameterType="com.grocery.on.wheels.model.VanPurchaseTransaction">
	INSERT INTO van_transaction (
	invoice_id, van_id, item_id, item_mrp, item_exp_date, cp, sp, customer_id, quantity, discount, other_charges, transaction_type, transaction_status, transaction_date, item_price_id)
	VALUES 
	 <foreach collection="purchaseTransItem" item="item" index="index" open="(" separator="),("  close=")">
			#{invoiceId},
			#{vanId},
            #{item.itemId},
            #{item.mrp},
			#{item.expDate},
			#{item.cp},
			#{item.sp},
            #{customerId},
			#{item.itemCount},
			#{discount},
			#{otherCharges},
			#{transactionType},
			#{transactionStatus},
			now(),
			#{item.itemPriceId}
       </foreach>
</insert>

<update id="updateInventoryStockSale" parameterType="com.grocery.on.wheels.model.VanPurchaseTransaction">
	<foreach collection="purchaseTransItem" item="purchItem" separator=";">
		update inventory_item_map
		set item_count = item_count - #{purchItem.itemCount},
		sale_pending = sale_pending - #{purchItem.itemCount}
		where inventory_id = #{inventoryId}
		and item_price_id = #{purchItem.itemPriceId}
		and exp_dt = #{purchItem.expDate}
	</foreach>;
</update>

<update id="updateVanStockPurchase" parameterType="com.grocery.on.wheels.model.VanPurchaseTransaction">
	<foreach collection="purchaseTransItem" item="purchItem" separator=";">
		update van_item_map 
		set purchase_pending = purchase_pending + #{purchItem.itemCount}	
		where van_id = #{vanId} 
		and item_price_id = #{purchItem.itemPriceId}
		and exp_dt = #{purchItem.expDate}
	</foreach>;
</update>
<update id="updateVanStockSale" parameterType="com.grocery.on.wheels.model.VanPurchaseTransaction">
	<foreach collection="purchaseTransItem" item="purchItem" separator=";">
		update van_item_map 
		set item_count = item_count - #{purchItem.itemCount},
			sale_pending = sale_pending + #{purchItem.itemCount}
		where van_id = #{vanId} 
		and item_price_id = #{purchItem.itemPriceId}
		and exp_dt = #{purchItem.expDate}
	</foreach>;
</update>

<insert id="addVanItemMap" parameterType="com.grocery.on.wheels.model.InventoryPurchaseTransaction">
INSERT IGNORE INTO van_item_map (van_id, item_price_id, exp_dt, item_count, purchase_pending, sale_pending)
	 VALUES 
	 <foreach collection="purchaseTransItem" item="item" index="index" open="(" separator="),("  close=")">
			#{vanId},
            #{item.itemPriceId},
            #{item.expDate},
			0,
			0,
			0
       </foreach>
</insert>

<update id="validateInventoryPurchase">
<foreach collection="itemValidateList" item="itemValidate">
	update inventory_item_map 
	set purchase_pending = purchase_pending - #{itemValidate.validateCount} - #{itemValidate.refundCount},
	item_count = item_count + #{itemValidate.validateCount}
	where inventory_id = #{itemValidate.vanInvId} and item_price_id = #{itemValidate.itemPriceId}
	and exp_dt = #{itemValidate.expDate};
</foreach>
</update>

<update id="validateInventorySale">
<foreach collection="itemValidateList" item="itemValidate">
	update inventory_item_map 
	set sale_pending = sale_pending - #{itemValidate.validateCount},
	item_count = item_count + #{itemValidate.validateCount}
	where inventory_id = #{itemValidate.vanInvId} and item_price_id = #{itemValidate.itemPriceId}
	and exp_dt = #{itemValidate.expDate};
</foreach>
</update>


<update id="validateVanPurchase">
<foreach collection="itemValidateList" item="itemValidate">
	update van_item_map 
	set purchase_pending = purchase_pending - #{itemValidate.validateCount},
	item_count = item_count + #{itemValidate.validateCount}
	where inventory_id = #{itemValidate.vanInvId} and item_price_id = #{itemValidate.itemPriceId}
	and exp_dt = #{itemValidate.expDate};
</foreach>
</update>

<update id="validateVanSale">
<foreach collection="itemValidateList" item="itemValidate">
	update van_item_map 
	set sale_pending = sale_pending - #{itemValidate.validateCount},
	item_count = item_count + #{itemValidate.validateCount}
	where inventory_id = #{itemValidate.vanInvId} and item_price_id = #{itemValidate.itemPriceId}
	and exp_dt = #{itemValidate.expDate};
</foreach>
</update>


<delete id="clearTransaction">
	delete from inventory_transaction;
	delete from van_transaction;
</delete>

</mapper>